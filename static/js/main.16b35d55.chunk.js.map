{"version":3,"sources":["types/SortType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoItem","todo","selectTodo","selectedTodo","id","completed","title","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","query","onChangeQuery","sortType","setSortType","value","String","onChange","event","target","ACTIVE","COMPLETED","ALL","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","getDefaultTodo","useState","user","setUser","useEffect","userId","client","href","email","name","App","setTodos","setSelectedTodo","setQuery","normalizedQuery","toLowerCase","todosFromServer","request","length","filteredTodos","filter","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16b35d55.chunk.js","sourcesContent":["export enum SortType {\n  ALL,\n  ACTIVE,\n  COMPLETED,\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  selectedTodo: Todo;\n  selectTodo: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectTodo,\n  selectedTodo,\n}) => {\n  const { id, completed, title } = todo;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames(\n            '',\n            {\n              'has-text-success': completed,\n              'has-text-danger': !completed,\n            },\n          )}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            selectTodo(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye-slash': selectedTodo.id === id,\n                'fa-eye': selectedTodo.id !== id,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo;\n  selectTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            selectTodo={selectTodo}\n            selectedTodo={selectedTodo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { SortType } from '../../types/SortType';\n\ntype Props = {\n  query: string;\n  onChangeQuery: (request: string) => void;\n  sortType: number;\n  setSortType: (value: number) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onChangeQuery,\n  sortType,\n  setSortType,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={String(sortType)}\n            onChange={(event) => {\n              switch (event.target.value) {\n                case '1':\n                  setSortType(SortType.ACTIVE);\n                  break;\n                case '2':\n                  setSortType(SortType.COMPLETED);\n                  break;\n\n                default:\n                  setSortType(SortType.ALL);\n                  break;\n              }\n            }}\n          >\n            <option value=\"0\">All</option>\n            <option value=\"1\">Active</option>\n            <option value=\"2\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            onChangeQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onChangeQuery('');\n            }}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  selectTodo: (todo:Todo) => void;\n  getDefaultTodo(): Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  selectTodo,\n  getDefaultTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = selectedTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(client => setUser(client));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                selectTodo(getDefaultTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SortType } from './types/SortType';\n\nexport const App: React.FC = () => {\n  const getDefaultTodo = () => {\n    return ({\n      id: 0,\n      title: '',\n      completed: false,\n      userId: 0,\n    });\n  };\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState(getDefaultTodo());\n  const [query, setQuery] = useState('');\n  const [sortType, setSortType] = useState(SortType.ALL);\n\n  const normalizedQuery = query.toLowerCase();\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  const getFilteredTodos = () => {\n    let filteredTodos = [...todos];\n\n    switch (sortType) {\n      case SortType.ACTIVE:\n        filteredTodos = filteredTodos.filter(todo => !todo.completed);\n        break;\n\n      case SortType.COMPLETED:\n        filteredTodos = filteredTodos.filter(todo => todo.completed);\n        break;\n\n      default:\n    }\n\n    if (query) {\n      filteredTodos = filteredTodos.filter(todo => todo.title.toLowerCase()\n        .includes(normalizedQuery));\n    }\n\n    return filteredTodos;\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                sortType={sortType}\n                setSortType={setSortType}\n                query={query}\n                onChangeQuery={(request: string) => {\n                  setQuery(request);\n                }}\n              />\n            </div>\n\n            <div className=\"block\">\n              {(todos.length > 0) ? (\n                <TodoList\n                  todos={getFilteredTodos()}\n                  selectedTodo={selectedTodo}\n                  selectTodo={(todo) => {\n                    setSelectedTodo(todo);\n                  }}\n                />\n              ) : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo.userId !== 0 && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectTodo={(todo) => {\n            setSelectedTodo(todo);\n          }}\n          getDefaultTodo={getDefaultTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}